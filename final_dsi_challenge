# -*- coding: utf-8 -*-
"""Final_DSI_Challenge.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bP3iBAEIfaFbkk-mfaKRum78yMGSlis8
"""



"""Importing required libraries"""

import pandas as pd
import matplotlib.pyplot as plt
import math
import numpy as np

from keras.models import Sequential
from keras.layers import Conv1D, MaxPooling1D, Flatten, Dense
from keras import optimizers



"""Initial reading in and plots of data"""

# Plotting for all confirmed cases

# Reading in data
url = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'
df_cases = pd.read_csv(url)

fig= plt.figure(figsize=(12,9))

for i in range(264):
  confirmed_cases= df_cases.iloc[i][4:]

  if(pd.isnull(df_cases.iloc[i][0])):
    name= df_cases.iloc[i][1]
  else:
    name= df_cases.iloc[i][0]
  
  if(max(confirmed_cases) > 50000):
    plt.plot(confirmed_cases, label= name)
  else:
    plt.plot(confirmed_cases)


plt.xlabel("Dates")
plt.ylabel("No. of cases")
plt.title("Confirmed Coronavirus Cases")
plt.axhline(y=50000, color= 'r', label= str(50000))
plt.legend()
plt.show()

# Plotting for deaths

# Reading in data
url = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv'
df_deaths = pd.read_csv(url)

fig= plt.figure(figsize=(12,9))

for i in range(264):
  deaths= df_deaths.iloc[i][4:]

  if(pd.isnull(df_deaths.iloc[i][0])):
    name= df_deaths.iloc[i][1]
  else:
    name= df_deaths.iloc[i][0]
  
  if(max(deaths) > 10000):
    plt.plot(deaths, label= name)
  else:
    plt.plot(deaths)


plt.xlabel("Dates")
plt.ylabel("No. of deaths")
plt.title("Deaths")
plt.axhline(y=10000, color= 'r', label= str(10000))
plt.legend()
plt.show()

# Plotting for recoveries

url = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv'
df_recoveries = pd.read_csv(url)

fig= plt.figure(figsize=(12,9))

for i in range(len(df_recoveries)):
  recoveries= df_recoveries.iloc[i][4:]

  if(pd.isnull(df_recoveries.iloc[i][0])):
    name= df_recoveries.iloc[i][1]
  else:
    name= df_recoveries.iloc[i][0]
  
  if(max(recoveries) > 40000):
    plt.plot(recoveries, label= name)
  else:
    plt.plot(recoveries)


plt.xlabel("Dates")
plt.ylabel("No. of recoveries")
plt.title("Recoveries")
plt.axhline(y=40000, color= 'r', label= str(40000))
plt.legend()
plt.show()



"""Initializing model"""

# Deep Learning model

n_features = 1
n_steps = 5 #choose a number of time steps

model = Sequential()
model.add(Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(n_steps, n_features)))
model.add(MaxPooling1D(pool_size=2))
model.add(Flatten())
model.add(Dense(50, activation='relu'))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')



"""Running the model"""

# Splitting code is taken from https://machinelearningmastery.com/how-to-develop-convolutional-neural-network-models-for-time-series-forecasting/?fbclid=IwAR0Oy6WpO6W-rg1bWgaydGbaxJH8-T_TfJWPKU7GiAQe3ypZjwsU_jTYJPM

def split_sequence(sequence, n_steps):
	X, y = list(), list()
	for i in range(len(sequence)):
		# find the end of this pattern
		end = i + n_steps
		# check if we are beyond the sequence
		if end > len(sequence)-1:
			break
		# gather input and output parts of the pattern
		seq_x, seq_y = sequence[i:end], sequence[end]
		X.append(seq_x)
		y.append(seq_y)
	return np.array(X), np.array(y)



"""Confirmed cases:"""

# Plotting for all confirmed cases-- takes ~15 min to run

# name of province and country
name_country= []
name_province= []
prediction= [] # for May 1st

for i in range(264):

  confirmed_cases_country= df_cases.iloc[i][4:]
  confirmed_cases_country= confirmed_cases_country.astype('float')

  #confirmed_cases_country= confirmed_cases_country[confirmed_cases_country>100]

  # Preparing training & testing sets (and reshaping)
  X, y= split_sequence(confirmed_cases_country, n_steps)

  if(X.shape == (0,)): # remvoing 0 training set
    name_country.append(df_cases.iloc[i][1])
    name_province.append(df_cases.iloc[i][0])
    prediction.append(0)
    continue

  X = X.reshape((X.shape[0], X.shape[1], n_features))

  # Fitting model to data
  model.fit(X, y, epochs=1000, verbose=0) # CNN

  last_prediction_window= X[-1]
  last_prediction_value= y[-1]

  new_window= last_prediction_window
  new_value= last_prediction_value

  for j in range(8):
    new_window= np.append(new_window[1:], new_value)
    new_window = new_window.reshape((1, n_steps, n_features))
    yhat = model.predict(new_window, verbose=0)
    new_value= round(yhat[0][0])
    new_window= new_window[0]
    day= (j+24)

    if(day == 31):
      name_country.append(df_cases.iloc[j][1])
      name_province.append(df_cases.iloc[j][0])
      prediction.append(new_value)
  
  print(i)

"""Writing to CSV file"""

from google.colab import drive
drive.mount('/content/drive')

path= 'drive/My Drive/Spring_2020/Quarantine/DSI_Prediction_Challenge/'

import csv

fieldnames = ['Province/State', 'Country/Region', 'Lat', 'Long', '5/1/20']

with open(path+'confirmed_cases.csv', mode='w') as csvfile:
    csvwriter = csv.writer(csvfile)
    csvwriter.writerow(fieldnames)

    for i in range(264):
      province= df_cases.iloc[i][0]
      country= df_cases.iloc[i][1]
      lat= df_cases.iloc[i][2]
      lon= df_cases.iloc[i][3]
      pred= prediction[i]

      csvwriter.writerow([province, country, lat, lon, pred])





"""Deaths:"""

# Plotting for all confirmed cases-- takes ~15 min to run

# name of province and country
prediction_deaths= [] # for May 1st

for i in range(264):

  deaths= df_deaths.iloc[i][4:]
  deaths= deaths.astype('float')

  #deaths= deaths[deaths>100]

  # Preparing training & testing sets (and reshaping)
  X, y= split_sequence(deaths, n_steps)

  if(X.shape == (0,)): # remvoing 0 training set
    prediction_deaths.append(0)
    continue

  X = X.reshape((X.shape[0], X.shape[1], n_features))

  # Fitting model to data
  model.fit(X, y, epochs=1000, verbose=0) # CNN

  last_prediction_window= X[-1]
  last_prediction_value= y[-1]

  new_window= last_prediction_window
  new_value= last_prediction_value

  for j in range(8):
    new_window= np.append(new_window[1:], new_value)
    new_window = new_window.reshape((1, n_steps, n_features))
    yhat = model.predict(new_window, verbose=0)
    new_value= round(yhat[0][0])
    new_window= new_window[0]
    day= (j+24)

    if(day == 31):
      prediction_deaths.append(new_value)
  
  print(i)

import csv

fieldnames = ['Province/State', 'Country/Region', 'Lat', 'Long', '5/1/20']

with open(path+'deaths.csv', mode='w') as csvfile:
    csvwriter = csv.writer(csvfile)
    csvwriter.writerow(fieldnames)

    for i in range(264):
      province= df_cases.iloc[i][0]
      country= df_cases.iloc[i][1]
      lat= df_cases.iloc[i][2]
      lon= df_cases.iloc[i][3]
      pred= prediction_deaths[i]

      csvwriter.writerow([province, country, lat, lon, pred])





"""Recoveries:"""

# Plotting for all confirmed cases-- takes ~15 min to run

# name of province and country
prediction_recoveries= [] # for May 1st

for i in range(250):

  recoveries= df_recoveries.iloc[i][4:]
  recoveries= recoveries.astype('float')

  #recoveries= recoveries[recoveries>100]

  # Preparing training & testing sets (and reshaping)
  X, y= split_sequence(recoveries, n_steps)

  if(X.shape == (0,)): # remvoing 0 training set
    prediction_recoveries.append(0)
    continue

  X = X.reshape((X.shape[0], X.shape[1], n_features))

  # Fitting model to data
  model.fit(X, y, epochs=1000, verbose=0) # CNN

  last_prediction_window= X[-1]
  last_prediction_value= y[-1]

  new_window= last_prediction_window
  new_value= last_prediction_value

  for j in range(8):
    new_window= np.append(new_window[1:], new_value)
    new_window = new_window.reshape((1, n_steps, n_features))
    yhat = model.predict(new_window, verbose=0)
    new_value= round(yhat[0][0])
    new_window= new_window[0]
    day= (j+24)

    if(day == 31):
      prediction_recoveries.append(new_value)
  
  print(i)

import csv

fieldnames = ['Province/State', 'Country/Region', 'Lat', 'Long', '5/1/20']

with open(path+'recoveries.csv', mode='w') as csvfile:
    csvwriter = csv.writer(csvfile)
    csvwriter.writerow(fieldnames)

    for i in range(250):
      province= df_cases.iloc[i][0]
      country= df_cases.iloc[i][1]
      lat= df_cases.iloc[i][2]
      lon= df_cases.iloc[i][3]
      pred= prediction_recoveries[i]

      csvwriter.writerow([province, country, lat, lon, pred])

